#!/bin/bash

# User configuration file: ~/.config/sibuserv/sibuserv.conf
# System configuration file: /etc/sibuserv/sibuserv.conf

##### Default settings #####

# Number of compilation processes:
[ -z "${JOBS}" ] && export JOBS=$(nproc 2>/dev/null || echo 1)

export BUILD_SERVER_SRC_DIRS="${HOME}/BuildServer/Sources"
export BUILD_SERVER_BIN_DIR="${HOME}/BuildServer/Binaries"
export BUILD_SERVER_LOG_FILE="${BUILD_SERVER_BIN_DIR}/build-server-daemon.log"

export STATIC_CODE_ANALYSIS_LOGS_SUBDIR="StaticCodeAnalysis"
export ENABLE_STATIC_CODE_ANALYSIS="true"
export ENABLE_CPPCHECK_LOG="true"
export ENABLE_CPPCHECK_XML="true"
export ENABLE_CPPCHECK_HTML="true"
export CPPCHECK_OPTIONS="-v -f -j${JOBS} --enable=style --suppress=variableScope"

export SYSTEMS="
                i686-w64-mingw32.static
                x86_64-w64-mingw32.static
                Ubuntu-14.04-LTS_i386_static
                Ubuntu-14.04-LTS_amd64_static
                android-21_x86
                android-21_arm
               "


##### Do not edit lines below! #####

##### Load settings from configuration file if it exists #####

for CONF_FILE in "/etc/sibuserv/sibuserv.conf" \
                 "${HOME}/.config/sibuserv/sibuserv.conf"
do
    [ -r "${CONF_FILE}" ] && . "${CONF_FILE}" || true
done

##### Some tools #####

GetLastBuiltVersion()
{
    if cd "${BUILD_SERVER_BIN_DIR}/${PROJECT}" &> /dev/null
    then
        LAST_BUILT_VER="$(ls 2> /dev/null | sort -V | tail -n1)"
    else
        LAST_BUILT_VER=""
    fi
}

GetCurrentVersion()
{
    cd "${SOURCES_DIR}/${PROJECT}"
    CURRENT_VER="unknown-version"
    if [ -d ".git" ]
    then
        if [ -d ".git/svn" ]
        then
            git svn rebase &> /dev/null
            CURRENT_VER=$(LANG=C.UTF-8 git svn info 2> /dev/null | sed -ne "s|^Last Changed Rev: \(.*\)|\1|p")
        elif [ -d ".git/hg" ]
        then
            # git-remote-hg is used
            git pull --all &> /dev/null
            CURRENT_VER="$(TZ=UTC git show -s --pretty='format:%ad__%h' --date=format-local:'%Y%m%d-%H%M%S')"
        else
            git pull --all &> /dev/null
            git submodule update --init --recursive &> /dev/null
            if git describe --tags &> /dev/null
            then
                CURRENT_VER="$(git describe --tags)"
            else
                CURRENT_VER="$(TZ=UTC git show -s --pretty='format:%ad__%h' --date=format-local:'%Y%m%d-%H%M%S')"
            fi
        fi
    elif [ -d ".hg" ]
    then
        hg pull &> /dev/null
        hg update &> /dev/null
        CURRENT_VER="$(TZ=UTC hg log --limit 1 -T '{date(date|localdate,"%Y%m%d-%H%M%S")}__{node|short}\n' | head -n1)"
    elif [ -d ".svn" ]
    then
        svn up &> /dev/null
        CURRENT_VER="$(LANG=C.UTF-8 svn info 2> /dev/null | sed -ne 's|^Last Changed Rev: \(.*\)|\1|p')"
    else
        CURRENT_VER="$(TZ=UTC date -d @$(stat -c'%Y' .) '+%Y%m%d-%H%M%S')"
    fi
}

PrepareProjectBuild()
{
    export BUILD_DIR="${BUILD_SERVER_BIN_DIR}/${PROJECT}/${CURRENT_VER}"
    if [ ! -d "${BUILD_DIR}" ]
    then
        mkdir -p "${BUILD_DIR}"
    else
        return 1
    fi
}

BeginProjectBuild()
{
    echo "$(date +"[%Y-%m-%d %H:%M:%S]") build: ${PROJECT}: ${CURRENT_VER}" &>> "${BUILD_SERVER_LOG_FILE}"
}

EndProjectBuild()
{
    echo "$(date +"[%Y-%m-%d %H:%M:%S]") done:  ${PROJECT}: ${CURRENT_VER}" &>> "${BUILD_SERVER_LOG_FILE}"
}

StartStaticCodeAnalysis()
{
    cd "${SOURCES_DIR}/${PROJECT}"
    if [ "${ENABLE_STATIC_CODE_ANALYSIS}" != "true" ]
    then
        return 0
    fi

    STATIC_CODE_ANALYSIS_LOGS_DIR="${BUILD_DIR}/${STATIC_CODE_ANALYSIS_LOGS_SUBDIR}"
    mkdir -p "${STATIC_CODE_ANALYSIS_LOGS_DIR}"

    if [ "${ENABLE_CPPCHECK_LOG}" = "true" ] && \
       [ $(which cppcheck | wc -l) = "1" ]
    then
        LOG_FILE="${STATIC_CODE_ANALYSIS_LOGS_DIR}/cppcheck.log"
        echo "$(date +"[%Y-%m-%d %H:%M:%S]") start of code analysis" &> "${LOG_FILE}"
        cppcheck -q ${CPPCHECK_OPTIONS} . &>> "${LOG_FILE}"
        echo "$(date +"[%Y-%m-%d %H:%M:%S]") end of code analysis" &>> "${LOG_FILE}"
        STAT_FILE="${STATIC_CODE_ANALYSIS_LOGS_DIR}/cppcheck.stats.txt"
        grep ': (' "${LOG_FILE}" | tr '()' '*' | cut -d* -f2 | sort | uniq -c &> "${STAT_FILE}"
    fi
    if [ "${ENABLE_CPPCHECK_XML}" = "true" ] && \
       [ $(which cppcheck | wc -l) = "1" ]
    then
        XML_FILE="${STATIC_CODE_ANALYSIS_LOGS_DIR}/cppcheck.xml"
        cppcheck -q ${CPPCHECK_OPTIONS} --xml --xml-version=2 . &> "${XML_FILE}"
    fi
    if [ "${ENABLE_CPPCHECK_HTML}" = "true" ] && \
       [ "${ENABLE_CPPCHECK_XML}"  = "true" ] && \
       [ $(which cppcheck-htmlreport | wc -l) = "1" ] && \
       [ -r "${XML_FILE}" ]
    then
        HTML_DIR="${STATIC_CODE_ANALYSIS_LOGS_DIR}/cppcheck.html"
        cppcheck-htmlreport --source-dir=. --report-dir="${HTML_DIR}" --file="${XML_FILE}" \
                            --title="${PROJECT} - ${CURRENT_VER}" \
                            &> "${STATIC_CODE_ANALYSIS_LOGS_DIR}/cppcheck.html.log"
    fi
}

ProcessProject()
{
    GetLastBuiltVersion
    GetCurrentVersion

    if [ "${LAST_BUILT_VER}" != "${CURRENT_VER}" ]
    then
        PrepareProjectBuild || return 0
        BeginProjectBuild

        cd "${SOURCES_DIR}/${PROJECT}" || exit 1
        for CUR_SYSTEM in ${SYSTEMS}
        do
            build-project ${CUR_SYSTEM}         &> /dev/null
            build-project install ${CUR_SYSTEM} &> /dev/null
            build-project delete  ${CUR_SYSTEM} &> /dev/null
            build-project rename  ${CUR_SYSTEM} &> /dev/null
        done

        StartStaticCodeAnalysis
        EndProjectBuild
    fi
}

##### Script body #####

export DELIMITER=":"
while [ "${BUILD_SERVER_SRC_DIRS}" ]
do
    export SOURCES_DIR="${BUILD_SERVER_SRC_DIRS%%${DELIMITER}*}"
    if [ "${BUILD_SERVER_SRC_DIRS}" != "${SOURCES_DIR}" ]
    then
        BUILD_SERVER_SRC_DIRS="${BUILD_SERVER_SRC_DIRS#*${DELIMITER}}"
    else
        export BUILD_SERVER_SRC_DIRS=""
    fi

    [ ! -d "${SOURCES_DIR}" ] && continue || true
    cd "${SOURCES_DIR}"

    [ "$(ls | wc -l)" = "0" ] && continue || true
    for PROJECT in *
    do
        [ -d "${SOURCES_DIR}/${PROJECT}" ] && ProcessProject || true
    done
done

