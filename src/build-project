#!/bin/bash

export PROJECT_DIR="$(realpath -s .)"

[ -z "${BUILD_DIR}" ] && \
    export BUILD_DIR="$(realpath -s "${PROJECT_DIR}/../build")-$(basename "${PROJECT_DIR}")"

##### Default settings #####

# Number of compilation processes:
[ -z "${JOBS}" ] && export JOBS=4

export LXE_DIR="/opt/lxe"
export MXE_DIR="/opt/mxe"

export QT_SERIES="5.7"
export QT_SDK_DIR="/opt/Qt/qt-current/${QT_SERIES}"

export ANDROID_SDK_ROOT="/opt/android_sdk/android-sdk-linux"
export ANDROID_NDK_ROOT="/opt/android_ndk/android-ndk-r12"
export ANDROID_NDK_TOOLCHAIN_VERSION="4.9"
export ANDROID_PLATFORM="android-21"

export JDK="$(ls -d /usr/lib/jvm/java-*-openjdk-* | sort -V | tail -n1)"
export ANT="/usr/bin/ant"

if [ -z "${SYSTEMS}" ]
then
    SYSTEMS="${SYSTEMS} i686-w64-mingw32.static x86_64-w64-mingw32.static"
    SYSTEMS="${SYSTEMS} Ubuntu-14.04-LTS_i386_static Ubuntu-14.04-LTS_amd64_static"
    # SYSTEMS="${SYSTEMS} Ubuntu-14.04-LTS_i386_shared Ubuntu-14.04-LTS_amd64_shared"
    # SYSTEMS="${SYSTEMS} AstraLinux-1.2_static AstraLinux-1.3_static AstraLinux-1.4_static"
    # SYSTEMS="${SYSTEMS} AstraLinux-1.2_shared AstraLinux-1.3_shared AstraLinux-1.4_shared"
    SYSTEMS="${SYSTEMS} android_x86 android_armv7"
fi

##### Do not edit lines below! #####

##### Load settings from configuration file if it exists #####

for CONF_FILE in "/etc/sibuserv/sibuserv.conf" \
                 "${HOME}/.config/sibuserv/sibuserv.conf"
do
    [ -r "${CONF_FILE}" ] && . "${CONF_FILE}"
done

##### Some tools #####

IsOption()
{
    for OPT in clean distclean delete -V --version -h --help
    do
        [ "${1}" = "${OPT}" ] && return 0
    done
    return 1
}

##### Determining the list of target systems #####

export ORIG_PATH="${PATH}"
if [ ! -z "${1}" ]
then
    if ! IsOption "${1}"
    then
        export SYSTEMS=${@}
    elif [ ! -z "${2}" ]
    then
        export SYSTEMS=""
        for N in $(seq 2 $#)
        do
            export SYSTEMS="${SYSTEMS} $(eval echo \$${N})"
        done
    fi
fi

##### Help, version, clean up an full clean up #####
if [ "${1}" = "-h" ] || [ "${1}" = "--help" ]
then
    echo \
"Usage: build-project [option] [system 1] [system 2] [system 3] ...

Program should be launched in project directory!

Options:
    list            list of all available target systems
    clean           clean up (\`make clean\` for all systems)
    distclean       full clean up (\`make distclean\` for all systems)
    delete          delete sub-directories (\`rm -rf\` for all systems)
    -V, --version   display LXE version and exit
    -h, --help      display this help and exit

Examples:
    build-project
    build-project AstraLinux-1.2_static
    build-project Ubuntu-14.04-LTS_i386_shared Ubuntu-14.04-LTS_amd64_shared
    build-project list
    build-project clean
    build-project clean AstraLinux-1.2_static i686-w64-mingw32.static
    build-project distclean
    build-project distclean x86_64-w64-mingw32.static
    build-project delete
    build-project delete android_x86 android_armv7

Settings:
    1) Default settings in the beginning of this file.
    2) System configuration file: /etc/sibuserv/sibuserv.conf
    3) User configuration file: ~/.config/sibuserv/sibuserv.conf
"
    exit 0
elif [ "${1}" = "-V" ] || [ "${1}" = "--version" ]
then
    echo "LXE version: $(\"${LXE_DIR}/make.sh\" --version)"
    exit 0
elif [ "${1}" = "list" ]
then
    if cd "${LXE_DIR}/dist" 2> /dev/null
    then
        for SYSTEM in *
        do
            echo "${SYSTEM}"
        done
    fi
    if cd "${MXE_DIR}/usr" 2> /dev/null
    then
        for SYSTEM in *mingw*
        do
            echo "${SYSTEM}"
        done
    fi
    if cd "${QT_SDK_DIR}" 2> /dev/null
    then
        for SYSTEM in *android*
        do
            echo "${SYSTEM}"
        done
    fi
    exit 0
elif [ "${1}" = "clean" ]
then
    for SYSTEM in ${SYSTEMS}
    do
        MAKE_FILE="${BUILD_DIR}/${SYSTEM}/Makefile"
        if [ -e "${MAKE_FILE}" ]
        then
            echo "cd \"${BUILD_DIR}/${SYSTEM}\""
            cd "${BUILD_DIR}/${SYSTEM}"
            echo "make clean &> /dev/null"
            make clean &> /dev/null
        fi
    done
    exit 0
elif [ "${1}" = "distclean" ]
then
    for SYSTEM in ${SYSTEMS}
    do
        MAKE_FILE="${BUILD_DIR}/${SYSTEM}/Makefile"
        if [ -e "${MAKE_FILE}" ]
        then
            echo "cd \"${BUILD_DIR}/${SYSTEM}\""
            cd "${BUILD_DIR}/${SYSTEM}"
            echo "make distclean &> /dev/null"
            make distclean &> /dev/null
        fi
    done
    exit 0
elif [ "${1}" = "delete" ]
then
    for SYSTEM in ${SYSTEMS}
    do
        BUILD_SUB_DIR="${BUILD_DIR}/${SYSTEM}"
        if [ -d "${BUILD_SUB_DIR}" ]
        then
            echo "rm -rf \"${BUILD_SUB_DIR}\""
            rm -rf "${BUILD_SUB_DIR}"
        fi
    done
    exit 0
fi

##### Some tools #####

DefinePaths()
{
    if [[ "${SYSTEM}" = *mingw* ]]
    then
        export SYSTEM_DIR="${MXE_DIR}/usr/${SYSTEM}"
    elif [[ "${SYSTEM}" = *android* ]]
    then
        export SYSTEM_DIR="${QT_SDK_DIR}/${SYSTEM}"
    else
        export SYSTEM_DIR="${LXE_DIR}/dist/${SYSTEM}"
    fi
    export BUILD_SUB_DIR="${BUILD_DIR}/${SYSTEM}"
}

CheckSystem()
{
    if [ ! -d "${SYSTEM_DIR}" ]
    then
        echo "System ${SYSTEM_DIR} does not exist!"
        continue
    fi
}

IsSafePath()
{
    # return 0

    [ -z "${1}" ] && return 1 || true

    # All special characters:
    # autotools:    *[\\\$\&\*\(\)\[\]\ \"\'\`\;:#=]*
    # cmake:        *[\\\$\&\*\(\)\[\]\ \"\'\`\;:#=]*
    # qmake:        *[\\\|\$\&\(\)\<\>\ \"\'\`\;:#=]*
    #
    # Not fixed (subdir workaround):
    # autotools:    *[\\\$\&\(\)\"\'\`#]*
    # cmake:        *[\\\"]*
    # qmake:        ---
    if [[ "${1}" = *[\\\|\$\&\*\(\)\[\]\<\>\ \"\'\`\;:#=]* ]]
    then
       return 1
    fi
}

IsAndroidDeployQtSafePath()
{
    [ -z "${1}" ] && return 1 || true

    if [[ "${1}" = *[\\\|\(\)\<\>\"\'\`\;:]* ]]
    then
       return 1
    fi
}

RandomSalt()
{
    if [[ "${1}" =~ ^[0-9]+$ ]]
    then
        local STRING_SIZE="${1}"
    else
        local STRING_SIZE="32"
    fi
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${STRING_SIZE} | head -n1
}

DetectBuildAutomationSystemType()
{
    cd "${PROJECT_DIR}"
    IsSafePath "${PROJECT_DIR}" && \
        export PROJECT_SRC_DIR="${PROJECT_DIR}" || \
        export PROJECT_SRC_DIR="tmp-sources-dir"

    if [ "$(ls *.pro 2> /dev/null | wc -l)" != "0" ]
    then
        export BUILD_SYSTEM_TYPE="qmake"
        export PROJECT_FILE="${PROJECT_SRC_DIR}/$(ls *.pro | head -n1)"
        return 0
    elif [ "$(ls CMakeLists.txt 2> /dev/null | wc -l)" != "0" ]
    then
        export BUILD_SYSTEM_TYPE="cmake"
        export PROJECT_FILE="${PROJECT_SRC_DIR}/CMakeLists.txt"
        return 0
    elif [ "$(grep GNU configure 2> /dev/null | wc -l)" != "0" ]
    then
        export BUILD_SYSTEM_TYPE="autotools"
        export PROJECT_FILE="${PROJECT_SRC_DIR}/configure"
        return 0
    else
        echo "Unknown build automation system type!"
        exit 1
    fi
}

BeginBuild()
{
    echo "[system]   ${SYSTEM_DIR}"
    echo "[build]    ${BUILD_SUB_DIR}"
}

EndBuild()
{
    echo "[done]     ${BUILD_SUB_DIR}"
}

SetAndroidSpecificVariables()
{
    export ARCH="$(echo ${SYSTEM} | sed -ne 's|^android_\(.*\)|\1|p')"
    [ "${ARCH}" = "armv7" ] && export ARCH="arm" || true
    # target
    if [ "${ARCH}" = "arm" ] ; then
        export TARGET="arm-linux-androideabi"
    elif [ "${ARCH}" = "arm64" ] ; then
        export TARGET="aarch64-linux-android"
    elif [ "${ARCH}" = "mips" ] ; then
        export TARGET="mipsel-linux-android"
    elif [ "${ARCH}" = "mips64" ] ; then
        export TARGET="mips64el-linux-android"
    elif [ "${ARCH}" = "x86" ] ; then
        export TARGET="i686-linux-android"
    elif [ "${ARCH}" = "x86_64" ] ; then
        export TARGET="x86_64-linux-android"
    else
        export TARGET="${ARCH}"
    fi
    # dirty fix because of irrational Android NDK developers
    if [ "${ARCH}" = "x86" ]
    then
        export TARGET_SPECIAL_NAME="x86"
    elif [ "${ARCH}" = "x86_64" ]
    then
        export TARGET_SPECIAL_NAME="x86_64"
    else
        export TARGET_SPECIAL_NAME="${TARGET}"
    fi
}

UnsetAndroidSpecificVariables()
{
    unset ARCH TARGET TARGET_SPECIAL_NAME
}

PrepareBuild()
{
    unset CC CXX CFLAGS CPPFLAGS CXXFLAGS LDFLAGS

    if [ -z "${PROJECT_SRC_DIR}" ]
    then
        echo "PROJECT_SRC_DIR is empty!"
        exit 1
    fi

    case "${BUILD_SYSTEM_TYPE}" in
    "qmake")
        if [[ "${SYSTEM}" = *mingw* ]]
        then
            export CONFIGURE_TOOL="${SYSTEM_DIR}/qt5/bin/qmake"
            export CONFIGURE_OPTIONS="-r -spec win32-g++ ${PROJECT_FILE}"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${MXE_DIR}/usr/bin:${SYSTEM_DIR}/qt5/bin:${ORIG_PATH}"
        elif [[ "${SYSTEM}" = *android* ]]
        then
            export CONFIGURE_TOOL="${SYSTEM_DIR}/bin/qmake"
            export CONFIGURE_OPTIONS="-r -spec android-g++ ${PROJECT_FILE} ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${ORIG_PATH}"
            export PATH="${ANDROID_SDK_ROOT}/tools:${PATH}"
            export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
            export PATH="${QT_SDK_DIR}/${SYSTEM}/bin:${PATH}"
        else
            export CONFIGURE_TOOL="${SYSTEM_DIR}/sysroot/qt5/bin/qmake"
            export CONFIGURE_OPTIONS="-r -spec linux-g++-${SYSTEM} ${PROJECT_FILE}"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${SYSTEM_DIR}/bin:${SYSTEM_DIR}/sysroot/qt5/bin:${ORIG_PATH}"
        fi
    ;;
    "cmake")
        if [[ "${SYSTEM}" = *mingw* ]]
        then
            export CONFIGURE_TOOL="$(which cmake)"
            local  CMAKE_TOOLCHAIN_FILE="${SYSTEM_DIR}/share/cmake/mxe-conf.cmake"
            export CONFIGURE_OPTIONS="-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} \
                                      -DCMAKE_INSTALL_PREFIX=/usr \
                                      ${PROJECT_SRC_DIR}"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${MXE_DIR}/usr/bin:${SYSTEM_DIR}/qt5/bin:${ORIG_PATH}"
        elif [[ "${SYSTEM}" = *android* ]]
        then
            echo "Build of cmake-based projects for Android is not supported yet."
            continue
        else
            . "${LXE_DIR}/etc/${SYSTEM}.sh"
            export CONFIGURE_TOOL="$(which cmake)"
            local  CMAKE_TOOLCHAIN_FILE="${SYSTEM_DIR}/sysroot/usr/share/cmake/${SYSTEM}.config.cmake"
            local  CC=$(ls "${SYSTEM_DIR}/bin/${TARGET}"-gcc-[0-9]* 2> /dev/null | sort -V | tail -n1)
            local  CXX=$(ls "${SYSTEM_DIR}/bin/${TARGET}"-g++-[0-9]* 2> /dev/null | sort -V | tail -n1)
            export CONFIGURE_OPTIONS="-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} \
                                      -DCMAKE_INSTALL_PREFIX=/usr \
                                      -DCMAKE_CXX_COMPILER=${CXX} \
                                      -DCMAKE_C_COMPILER=${CC} \
                                      ${PROJECT_SRC_DIR}"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${SYSTEM_DIR}/bin:${SYSTEM_DIR}/sysroot/qt5/bin:${ORIG_PATH}"
        fi
    ;;
    "autotools")
        if [[ "${SYSTEM}" = *mingw* ]]
        then
            export CONFIGURE_TOOL="${PROJECT_FILE}"
            export CONFIGURE_OPTIONS="--target=${SYSTEM} --host=${SYSTEM} --prefix=/usr"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${MXE_DIR}/usr/bin:${SYSTEM_DIR}/qt5/bin:${ORIG_PATH}"
        elif [[ "${SYSTEM}" = *android* ]]
        then
            SetAndroidSpecificVariables
            export ANDROID_SYSROOT="${ANDROID_NDK_ROOT}/platforms/${ANDROID_PLATFORM}/arch-${ARCH}"
            local  ANDROID_PREFIX="${ANDROID_NDK_ROOT}/toolchains/${TARGET_SPECIAL_NAME}-${ANDROID_NDK_TOOLCHAIN_VERSION}/prebuilt/linux-x86_64"
            local  ANDROID_LLVM_DIR="${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/linux-x86_64"
            export CFLAGS="--sysroot=${ANDROID_SYSROOT} \
                           -I${ANDROID_SYSROOT}/usr/include \
                           -I${ANDROID_PREFIX}/include"
            export LDFLAGS="-L${ANDROID_SYSROOT}/usr/lib -L${ANDROID_PREFIX}/lib"
            export CPPFLAGS="${CFLAGS}"
            export CXXFLAGS="${CFLAGS}"
            export CONFIGURE_TOOL="${PROJECT_FILE}"
            export CONFIGURE_OPTIONS="--target=${TARGET} --host=${TARGET} --with-sysroot=${ANDROID_SYSROOT} --prefix=/usr"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${ORIG_PATH}"
            export PATH="${ANDROID_SDK_ROOT}/tools:${PATH}"
            export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
            export PATH="${ANDROID_LLVM_DIR}/bin:${PATH}"
            export PATH="${ANDROID_PREFIX}/bin:${PATH}"
            export PATH="${QT_SDK_DIR}/${SYSTEM}/bin:${PATH}"
            UnsetAndroidSpecificVariables
        else
            . "${LXE_DIR}/etc/${SYSTEM}.sh"
            export CONFIGURE_TOOL="${PROJECT_FILE}"
            export CONFIGURE_OPTIONS="--target=${TARGET} --host=${TARGET} --prefix=/usr"
            export MAKE_TOOL="make"
            export MAKE_OPTIONS="-j${JOBS} -i -k"
            export PATH="${SYSTEM_DIR}/bin:${SYSTEM_DIR}/sysroot/qt5/bin:${ORIG_PATH}"
        fi
    ;;
    esac
}

IsAvailableDiskSpaceEnough()
{
    [ -z "${1}" ] && return 1 || true
    [ -z "${2}" ] && return 1 || true

    REQUIRED=$(du -s "${1}" | awk '{print $1}' | tail -n1)
    AVAILABLE=$(df -k "${2}" | awk '{print $4}' | tail -n1)

    if [ "${REQUIRED}" -ge "${AVAILABLE}" ]
    then
        return 1
    fi
}

BuildAndroidPackage()
{
    [ "$(which androiddeployqt 2> /dev/null | wc -l)" = "0" ] && return 0 || true

    local ANDROID_SETTINGS_FILE="$(find . -type f -name '*.so-deployment-settings.json' | head -n1)"
    if [ ! -z "${ANDROID_SETTINGS_FILE}" ]
    then
        local ANDROID_BUILD_DIR="./android-build"

        if ! IsAndroidDeployQtSafePath "${BUILD_SUB_DIR}/android-build"
        then
            if IsAvailableDiskSpaceEnough "." "/tmp"
            then
                local TMP_DIR="/tmp/sibuserv_$(RandomSalt)"
                local ANDROID_BUILD_DIR="${TMP_DIR}/android-build"

                mkdir -p "${TMP_DIR}/"
                cp -af * "${TMP_DIR}/"

                local ANDROID_SETTINGS_FILE="$(find ${TMP_DIR} -type f -name '*.so-deployment-settings.json' | head -n1)"

                sed -i "s|${BUILD_SUB_DIR}|${TMP_DIR}|g" "${ANDROID_SETTINGS_FILE}" &> /dev/null
                sed -i "s!${BUILD_SUB_DIR}!${TMP_DIR}!g" "${ANDROID_SETTINGS_FILE}" &> /dev/null
            fi
        fi

        rm -rf "${ANDROID_BUILD_DIR}"
        "${MAKE_TOOL}" INSTALL_ROOT="${ANDROID_BUILD_DIR}" install

        androiddeployqt \
            --input  "${ANDROID_SETTINGS_FILE}" \
            --output "${ANDROID_BUILD_DIR}" \
            --android-platform "${ANDROID_PLATFORM}" \
            --deployment bundled \
            --jdk "${JDK}" \
            --ant "${ANT}" \
            --verbose
        #    --sign foo bar \
        #    --sign 'example' \
        #    --storepass '123456' \

        if ! IsAndroidDeployQtSafePath "${BUILD_SUB_DIR}/android-build"
        then
            if [[ "${TMP_DIR}" = *tmp/sibuserv_* ]]
            then
                rm -rf "./android-build"
                cp -af "${TMP_DIR}/android-build" .
                rm -rf "${TMP_DIR}/"
            fi
        fi

        # APP_FILE_NAME=QtApp-release-unsigned.apk
        local APP_FILE_NAME=QtApp-debug-unaligned.apk
        local PROJECT_NAME=$(basename "${PROJECT_DIR}")
        cp -af "./android-build/bin/${APP_FILE_NAME}" \
               "./${PROJECT_NAME}_${SYSTEM:8}_${ANDROID_PLATFORM}.apk"
    fi
}

BuildProject()
{
    local LOG_FILE="${BUILD_SUB_DIR}/build.log"
    rm -rf "${LOG_FILE}"

    mkdir -p "${BUILD_SUB_DIR}"
    cd "${BUILD_SUB_DIR}" || exit 1

    if ! IsSafePath "${PROJECT_DIR}"
    then
        mkdir -p "${BUILD_SUB_DIR}/${PROJECT_SRC_DIR}"
        cp -af "${PROJECT_DIR}"/* "${BUILD_SUB_DIR}/${PROJECT_SRC_DIR}/"
        echo "Source files are copied from '${PROJECT_DIR}' to '${BUILD_SUB_DIR}/${PROJECT_SRC_DIR}'." &>> "${LOG_FILE}"
    fi

    "${CONFIGURE_TOOL}" ${CONFIGURE_OPTIONS} &>> "${LOG_FILE}"
    "${MAKE_TOOL}" ${MAKE_OPTIONS} &>> "${LOG_FILE}"

    if [[ "${SYSTEM}" = *android* ]]
    then
        BuildAndroidPackage &>> "${LOG_FILE}"
    fi
}

# Build project using specified systems

for SYSTEM in ${SYSTEMS}
do
    DefinePaths
    CheckSystem

    DetectBuildAutomationSystemType
    PrepareBuild
    BeginBuild
    BuildProject
    EndBuild
done

